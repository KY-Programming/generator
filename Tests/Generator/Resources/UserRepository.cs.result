// ReSharper disable All

using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using System.Linq;

namespace KY.Generator.Test.Repositories
{
    public partial class UserRepository
    {
        private readonly DbSet<User> dataSet;
        private readonly DataContext dataContext;

        public UserRepository(DataContext dataContext = null)
        {
            this.dataContext = dataContext ?? new DataContext();
            this.dataSet = this.dataContext.Set<User>();
        }

        public IQueryable<User> Get()
        {
            return this.dataSet;
        }

        public User Get(params object[] keys)
        {
            return this.dataSet.Find(keys);
        }

        public User Add(User entity)
        {
            User result = this.dataSet.Add(entity);
            this.dataContext.SaveChanges();
            return result;
        }

        public IEnumerable<User> Add(IEnumerable<User> entities)
        {
            IEnumerable<User> result = entities.Select(x => this.dataSet.Add(x)).ToList();
            this.dataContext.SaveChanges();
            return result;
        }

        public User Update(User entity)
        {
            this.dataSet.AddOrUpdate(entity);
            this.dataContext.SaveChanges();
            return entity;
        }

        public IEnumerable<User> Update(IEnumerable<User> entities)
        {
            List<User> result = entities.ToList();
            result.ForEach(x => this.dataSet.AddOrUpdate(x));
            this.dataContext.SaveChanges();
            return result;
        }

        public void Delete(User entity)
        {
            this.dataSet.Remove(entity);
            this.dataContext.SaveChanges();
        }

        public void Delete(IEnumerable<User> entities)
        {
            this.dataSet.RemoveRange(entities);
            this.dataContext.SaveChanges();
        }

        public void Delete(params object[] keys)
        {
            this.dataSet.Remove(this.dataSet.Find(keys));
            this.dataContext.SaveChanges();
        }
    }
}