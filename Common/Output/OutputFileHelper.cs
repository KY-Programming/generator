using System.Text;
using System.Text.RegularExpressions;
using KY.Core;
using KY.Core.Crypt;

namespace KY.Generator.Output;

public static class OutputFileHelper
{
    private static readonly Regex outputIdRegex = new("outputid:(?<id>[a-zA-Z0-9-]+)", RegexOptions.Compiled);

    public static List<Guid> GetOutputIds(string content)
    {
        return content.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                      .Select(line => outputIdRegex.Match(line))
                      .Where(result => result.Success)
                      .Select(result => Guid.TryParse(result.Groups["id"].Value, out Guid guid) ? guid : (Guid?)null)
                      .Where(x => x.HasValue)
                      .Select(x => x.Value)
                      .ToList();
    }

    public static bool IsGeneratedFile(string content)
    {
        return content.Contains("<auto-generated>");
    }

    public static string? GetHash(string content)
    {
        List<string> filteredContent = string.IsNullOrEmpty(content)
                                           ? new List<string>()
                                           : content.Replace("\r", string.Empty)
                                                    .Split(new[] { "\n" }, StringSplitOptions.RemoveEmptyEntries)
                                                    .Where(line => !line.Contains("// outputid:"))
                                                    .ToList();
        // Strip header
        while ((filteredContent.FirstOrDefault()?.StartsWith("//") ?? false) || (filteredContent.FirstOrDefault()?.StartsWith("/*") ?? false))
        {
            filteredContent.RemoveAt(0);
        }
        if (filteredContent.Count == 0)
        {
            return null;
        }
        return Sha512.Create(string.Join(Environment.NewLine, filteredContent)).ToString();
    }

    public static string AppendOutputIds(string content, IEnumerable<Guid> ids, Guid? additionalId = null)
    {
        if (additionalId != null)
        {
            ids = ids.Concat(additionalId.Value.Yield());
        }
        StringBuilder builder = new(content);
        builder.AppendLine().AppendLine();
        ids.Unique().OrderBy(x => x).ForEach(id => builder.AppendLine($"// outputid:{id}"));
        return builder.ToString();
    }

    public static string RemoveOutputId(string content, Guid id)
    {
        return content.Replace($"// outputid:{id}", string.Empty);
    }
}
