using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using KY.Core;
using KY.Core.DataAccess;
using KY.Generator.Models;

namespace KY.Generator.Output
{
    public class OutputWriteAction : IOutputAction
    {
        private static Regex parseFormatter = new("^(\"(?<exe>[^\"]+)\"(\\s(?<params>.*))?)|((?<exe2>[^\\s]+)(\\s(?<params2>.*))?)$", RegexOptions.Compiled);
        private readonly IOptions options;
        private readonly IEnvironment environment;
        private bool executed;
        public string FilePath { get; }
        public string Content { get; }
        public Guid? OutputId { get; }
        public bool ForceOverwrite { get; }

        public OutputWriteAction(string filePath, string content, IOptions options, IEnvironment environment, Guid? outputId = null, bool forceOverwrite = false)
        {
            this.options = options;
            this.environment = environment;
            this.FilePath = filePath;
            this.Content = content;
            this.OutputId = outputId;
            this.ForceOverwrite = forceOverwrite;
        }

        public void Execute()
        {
            if (this.executed)
            {
                return;
            }
            this.executed = true;
            FileSystem.CreateDirectory(FileSystem.Parent(this.FilePath));
            string content = string.IsNullOrEmpty(this.options.Formatter) ? this.Content : this.Format(this.Content);
            if (!FileSystem.FileExists(this.FilePath))
            {
                Logger.Trace($"Write file {this.FilePath}");
                this.Write(content, new List<Guid>());
                return;
            }
            string contentToWriteHash = OutputFileHelper.GetHash(content);
            string contentRead = FileSystem.ReadAllText(this.FilePath);
            List<Guid> readOutputIds = OutputFileHelper.GetOutputIds(contentRead);
            string contentReadHash = OutputFileHelper.GetHash(contentRead);
            bool contentReadIsGenerated = OutputFileHelper.IsGeneratedFile(contentRead);
            if (contentToWriteHash == contentReadHash && contentToWriteHash != null)
            {
                if (this.OutputId != null && !readOutputIds.Contains(this.OutputId.Value))
                {
                    Logger.Trace($"File has no changes {this.FilePath}. Output id appended.");
                    this.Write(content, readOutputIds);
                }
                else if (contentRead.Contains("<auto-generated>") && !contentRead.Contains(this.GetType().Assembly.GetName().Version.ToString()))
                {
                    Logger.Trace($"File has no changes {this.FilePath}. Version updated.");
                    this.Write(content, readOutputIds);
                }
                else
                {
                    Logger.Trace($"File has no changes {this.FilePath}");
                }
            }
            else if (contentRead.Length == 0
                     || this.ForceOverwrite || this.options.ForceOverwrite
                     || contentReadIsGenerated && (this.OutputId == null || readOutputIds.Count == 0 || readOutputIds.Contains(this.OutputId.Value))
                     || !contentReadIsGenerated && this.OutputId != null && readOutputIds.Contains(this.OutputId.Value)
            )
            {
                Logger.Trace($"Overwrite file {this.FilePath}");
                this.Write(content, readOutputIds);
            }
            else if (!contentReadIsGenerated)
            {
                Logger.Error($"Can not overwrite file {this.FilePath}. File to overwrite is not generated. Please delete file manually!");
            }
            else
            {
                Logger.Error($"Can not overwrite file {this.FilePath}. File to overwrite was generated by a different project and has some differences. Please delete file manually or generate the other project first!");
            }
        }

        private void Write(string content, IEnumerable<Guid> readOutputIds)
        {
            content = OutputFileHelper.AppendOutputIds(content, readOutputIds, this.OutputId);
            FileSystem.WriteAllText(this.FilePath, content, Encoding.UTF8);
        }

        private string Format(string content)
        {
            string extension = Path.GetExtension(this.FilePath);
            string tempFile = this.FilePath.TrimEnd(extension) + ".temp" + extension;
            FileSystem.WriteAllText(tempFile, content, Encoding.UTF8);
            string command = this.options.Formatter.Replace("$file", tempFile)
                                 .Replace("$project", Environment.CurrentDirectory)
                                 .Replace("$output", this.environment.OutputPath);
            Logger.Trace($"Format file {tempFile}");
            Process cmd = new();
            cmd.StartInfo.FileName = "cmd.exe";
            cmd.StartInfo.RedirectStandardInput = true;
            cmd.StartInfo.RedirectStandardOutput = true;
            cmd.StartInfo.CreateNoWindow = true;
            cmd.StartInfo.UseShellExecute = false;
            cmd.Start();
            cmd.StandardInput.WriteLine(command);
            cmd.StandardInput.Flush();
            cmd.StandardInput.Close();
            cmd.WaitForExit();
            if (cmd.ExitCode != 0)
            {
                Logger.Error(cmd.StandardOutput.ReadToEnd());
            }
            string formattedContent = FileSystem.ReadAllText(tempFile);
            FileSystem.DeleteFile(tempFile);
            return formattedContent;
        }
    }
}
