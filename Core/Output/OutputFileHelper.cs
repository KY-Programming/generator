using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using KY.Core;
using KY.Core.Crypt;

namespace KY.Generator.Output
{
    public static class OutputFileHelper
    {
        private static readonly Regex outputIdRegex = new Regex("outputid:(?<id>[a-zA-Z0-9-]+)", RegexOptions.Compiled);
        private static readonly Regex commentLineRegex = new Regex(@"^\s*//", RegexOptions.Compiled);

        public static List<Guid> GetOutputIds(string content)
        {
            return content.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(line => outputIdRegex.Match(line))
                          .Where(result => result.Success)
                          .Select(result => new Guid(result.Groups["id"].Value))
                          .ToList();
        }

        public static bool IsGeneratedFile(string content)
        {
            return content.Contains("<auto-generated>");
        }
        

        public static string GetHash(string content)
        {
            string filteredContent = string.IsNullOrEmpty(content)
                                         ? string.Empty
                                         : string.Join(Environment.NewLine, content.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).Where(line => !commentLineRegex.IsMatch(line)));
            return Sha512.Create(filteredContent).ToString();
        }

        public static string AppendOutputIds(string content, IEnumerable<Guid> ids, Guid? additionalId = null)
        {
            if (additionalId != null)
            {
                ids = ids.Concat(additionalId.Value.Yield());
            }
            StringBuilder builder = new StringBuilder(content);
            builder.AppendLine().AppendLine();
            ids.Unique().OrderBy(x => x).ForEach(id => builder.AppendLine($"// outputid:{id}"));
            return builder.ToString();
        }

        public static string RemoveOutputId(string content, Guid id)
        {
            return content.Replace($"// outputid:{id}", string.Empty);
        }
    }
}